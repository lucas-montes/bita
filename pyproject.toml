[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bita"
version = "1.0.0"
description = "Bitacore Mini - A miniature backtesting API for financial portfolios"
authors = [
    {name = "Lucas Montes"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
    "Topic :: Scientific/Engineering",
]
keywords = ["backtesting", "finance", "portfolio", "api", "fastapi"]

dependencies = [
    "fastapi[standard]==0.115.12",
    "numpy==2.2.5",
    "pandas==2.2.3",
    "pydantic==2.11.4",
    "pyarrow==20.0.0",
    "httpx[http2]>=0.27.0,<1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest==8.3.3",
    "pytest-cov>=4.0.0,<6.0.0",
    "ruff>=0.1.0,<1.0.0",
    "mypy>=1.7.0,<2.0.0",
    "memray==1.17.2",
    "pytest-benchmark==5.1.0",
    "locust>=2.25.0,<3.0.0",
    "docker>=7.0.0,<8.0.0",
    "pyyaml>=6.0.0,<7.0.0",
]

[project.urls]
Homepage = "https://github.com/lucas-montes/bita"
Repository = "https://github.com/lucas-montes/bita.git"
Issues = "https://github.com/lucas-montes/bita/issues"

[project.scripts]
bita-generate-data = "generate_data:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["bita*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["bita"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.ruff]
target-version = "py311"
line-length = 88
src = ["bita"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "S101"]

[tool.ruff.lint.isort]
known-first-party = ["bita"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "numpy.*",
    "pyarrow.*",
    "locust.*",
]
ignore_missing_imports = true
